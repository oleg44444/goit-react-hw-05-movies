{"version":3,"file":"static/js/219.7e53e8f8.chunk.js","mappings":"8SAEaA,EAAW,mCAAG,6GAEAC,EAAAA,EAAAA,IACrB,4GAHqB,cAEjBC,EAFiB,yBAKhBA,EAASC,KAAKC,SALE,oGAAH,qDAUXC,EAAc,mCAAG,WAAMC,GAAN,gGAEHL,EAAAA,EAAAA,IAAA,6CACiBK,EADjB,wCAErB,CACEC,QAAS,CACPC,cACE,gOAPkB,cAEpBN,EAFoB,yBAYnBA,EAASC,MAZU,oGAAH,sDAiBdM,EAAS,mCAAG,WAAMH,GAAN,gGAEEL,EAAAA,EAAAA,IAAA,6CACiBK,EADjB,2BAErB,CACEC,QAAS,CACPC,cACE,gOAPa,cAEfN,EAFe,yBAWdA,EAASC,MAXK,oGAAH,sDAiBTO,EAAY,mCAAG,WAAMJ,GAAN,gFACpBK,EAAU,CACdJ,QAAS,CACPK,OAAQ,mBACRJ,cACE,+NALoB,kBAUDP,EAAAA,EAAAA,IAAA,6CACiBK,EADjB,kCAErBK,GAZsB,cAUlBT,EAVkB,yBAcjBA,EAASC,MAdQ,oGAAH,sDAmBZU,EAAgB,mCAAG,WAAMC,GAAN,gFACxBH,EAAU,CACdJ,QAAS,CACPK,OAAQ,oBAEVG,OAAQ,CACNC,QAAS,mCACTF,MAAAA,IAP0B,kBAYLb,EAAAA,EAAAA,IACrB,4CACAU,GAd0B,cAYtBT,EAZsB,yBAgBrBA,EAASC,MAhBY,sCAkB5Bc,QAAQC,IAAR,MAlB4B,8DAAH,qD,kKC/DhBC,EAAgBC,EAAAA,EAAAA,GAAH,2KASbC,EAAYD,EAAAA,EAAAA,GAAH,4JAQTE,EAAaF,EAAAA,EAAAA,IAAH,2GAOVG,EAAYH,EAAAA,EAAAA,EAAH,yHAQTI,EAAiBJ,EAAAA,EAAAA,EAAH,mG,SCS3B,EAhCa,WACX,IAAQd,GAAYmB,EAAAA,EAAAA,MAAZnB,QACR,GAA4BoB,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,8GAEKrB,EAAAA,EAAAA,GAAUH,GAFf,OAERH,EAFQ,OAIdyB,EAAUzB,EAAK4B,MAJD,gDAMdd,QAAQC,IAAR,MANc,yDAAH,qDASfY,GACD,GAAE,CAACxB,KAGF,SAACa,EAAD,UACGQ,EAAOK,KAAI,SAAAC,GAAK,OACf,UAACZ,EAAD,YACE,SAACC,EAAD,CACEY,IAAG,0CAAqCD,EAAME,cAC9CC,IAAKH,EAAMI,QAEb,SAACd,EAAD,UAAYU,EAAMI,QAClB,SAACb,EAAD,UAAiBS,EAAMK,cANTL,EAAMM,GADP,KAYtB,C","sources":["API/API.js","components/Cast/Cast.styled.js","components/Cast/Cast.js"],"sourcesContent":["import axios from 'axios';\n\nexport const fetchMovies = async () => {\n  try {\n    const response = await axios.get(\n      'https://api.themoviedb.org/3/trending/movie/week?language=en-US&api_key=177d4c1777884d0207a8f9260a3ed0b2'\n    );\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const fetchMovieData = async movieId => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}?append_to_response=1&language=en-US`,\n      {\n        headers: {\n          Authorization:\n            'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxNzdkNGMxNzc3ODg0ZDAyMDdhOGY5MjYwYTNlZDBiMiIsInN1YiI6IjY1MzBmODQzMTEwOGE4MDBjOWI1ZDdmOCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.7jYvvySJFvZSG-WbSK1ZGl3FBUiXQ3Hl8nNqDdI8jQE',\n        },\n      }\n    );\n\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const fetchCast = async movieId => {\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?language=en-US`,\n      {\n        headers: {\n          Authorization:\n            'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxNzdkNGMxNzc3ODg0ZDAyMDdhOGY5MjYwYTNlZDBiMiIsInN1YiI6IjY1MzBmODQzMTEwOGE4MDBjOWI1ZDdmOCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.7jYvvySJFvZSG-WbSK1ZGl3FBUiXQ3Hl8nNqDdI8jQE',\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const fetchReviews = async movieId => {\n  const options = {\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxNzdkNGMxNzc3ODg0ZDAyMDdhOGY5MjYwYTNlZDBiMiIsInN1YiI6IjY1MzBmODQzMTEwOGE4MDBjOWI1ZDdmOCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.7jYvvySJFvZSG-WbSK1ZGl3FBUiXQ3Hl8nNqDdI8jQE',\n    },\n  };\n\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?language=en-US&page=1`,\n      options\n    );\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const fetchSearchFilms = async query => {\n  const options = {\n    headers: {\n      accept: 'application/json',\n    },\n    params: {\n      api_key: '177d4c1777884d0207a8f9260a3ed0b2',\n      query,\n    },\n  };\n\n  try {\n    const response = await axios.get(\n      'https://api.themoviedb.org/3/search/movie',\n      options\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n    throw error;\n  }\n};\n","import styled from '@emotion/styled';\n\nexport const CastContainer = styled.ul`\n  list-style: none;\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n  gap: 20px;\n  padding: 0;\n  margin: 0;\n`;\n\nexport const ActorItem = styled.li`\n  background-color: #333;\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  color: #fff;\n`;\n\nexport const ActorImage = styled.img`\n  width: 100%;\n  height: auto;\n  display: block;\n  border-radius: 8px 8px 0 0;\n`;\n\nexport const ActorName = styled.p`\n  margin: 0;\n  font-size: 16px;\n  padding: 10px;\n  text-align: center;\n  font-weight: bold;\n`;\n\nexport const ActorCharacter = styled.p`\n  margin: 0;\n  font-size: 14px;\n  padding: 10px;\n  text-align: center;\n`;\n","import { useState, useEffect } from 'react';\nimport { fetchCast } from 'API/API';\nimport { useParams } from 'react-router-dom';\nimport {\n  CastContainer,\n  ActorItem,\n  ActorImage,\n  ActorName,\n  ActorCharacter,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = await fetchCast(movieId);\n\n        setActors(data.cast);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchData();\n  }, [movieId]);\n\n  return (\n    <CastContainer>\n      {actors.map(actor => (\n        <ActorItem key={actor.id}>\n          <ActorImage\n            src={`https://image.tmdb.org/t/p/w200/${actor.profile_path}`}\n            alt={actor.name}\n          />\n          <ActorName>{actor.name}</ActorName>\n          <ActorCharacter>{actor.character}</ActorCharacter>\n        </ActorItem>\n      ))}\n    </CastContainer>\n  );\n};\nexport default Cast;\n"],"names":["fetchMovies","axios","response","data","results","fetchMovieData","movieId","headers","Authorization","fetchCast","fetchReviews","options","accept","fetchSearchFilms","query","params","api_key","console","log","CastContainer","styled","ActorItem","ActorImage","ActorName","ActorCharacter","useParams","useState","actors","setActors","useEffect","fetchData","cast","map","actor","src","profile_path","alt","name","character","id"],"sourceRoot":""}